{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,ECAO,eAAe,IACpB,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,kBAC7B,GAAI,CAAC,EAAS,EAAE,CACd,MAAM,AAAI,MAAM,CAAC,oBAAoB,EAAE,EAAS,MAAM,CAAC,CAAC,EAG1D,OADa,MAAM,EAAS,IAAI,EAElC,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,wBAAyB,EACzC,CACF,CAEO,eAAe,IACpB,IAAM,EAAc,MAAM,IAEpB,EAAQ,IAAI,KAQlB,OANmB,EAAY,IAAI,CAAC,CAAC,EAAE,KACrC,IAAM,EAAQ,IAAI,KAAK,EAAE,UAAU,EAC7B,EAAQ,IAAI,KAAK,EAAE,UAAU,EACnC,OAAO,EAAoB,EAAO,GAAS,EAAoB,EAAO,EACxE,EAIF,C,E,E,O,C,iB,I,GAGA,IAAM,EAAsB,CAAC,EAAO,IAE3B,AADU,CAAA,EAAQ,CAAA,EACN,K,G,E,Q,S,C,C,C,EC9Bd,SAAS,EAAW,CAAM,EAC/B,IAAM,EAAO,IAAI,KAAK,GAOhB,EAAM,EAAK,OAAO,GAClB,EAAQ,AANK,CACjB,UAAW,WAAY,QAAS,QAAS,MAAO,OAChD,OAAQ,SAAU,YAAa,UAAW,WAAY,WACvD,AAGuB,CAAC,EAAK,QAAQ,GAAG,CACnC,EAAO,EAAK,WAAW,GAGvB,EAAS,AAKjB,SAAsB,CAAG,EACvB,GAAI,EAAM,GAAK,EAAM,GAAI,MAAO,KAChC,OAAQ,EAAM,IACV,KAAK,EAAG,MAAO,IACf,MAAK,EAAG,MAAO,IACf,MAAK,EAAG,MAAO,IACf,SAAS,MAAO,IACpB,CACF,EAb8B,GAE5B,MAAO,CAAC,EAAE,EAAM,CA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","sources":["<anon>","src/utils/fetchEventData.js","src/utils/formatDate.js","src/components/eventComponent.js","config.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirefc44\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirefc44\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"evz6q\", function(module, exports) {\n\n$parcel$export(module.exports, \"sortDataByDate\", () => $a8ff3090db36c7ef$export$bb81d7902e9f278);\nasync function $a8ff3090db36c7ef$export$8134c072fddab6a5() {\n    try {\n        const response = await fetch(\"/api/v1/events\");\n        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error(\"Failed to fetch data:\", error);\n    }\n}\nasync function $a8ff3090db36c7ef$export$bb81d7902e9f278() {\n    const fetchedData = await $a8ff3090db36c7ef$export$8134c072fddab6a5();\n    const today = new Date();\n    const sortedData = fetchedData.sort((a, b)=>{\n        const dateA = new Date(a.start_date);\n        const dateB = new Date(b.start_date);\n        return $a8ff3090db36c7ef$var$getDifferenceInDays(today, dateA) - $a8ff3090db36c7ef$var$getDifferenceInDays(today, dateB);\n    });\n    return sortedData;\n}\n// Function to calculate the difference in days between two dates\nconst $a8ff3090db36c7ef$var$getDifferenceInDays = (date1, date2)=>{\n    const diffTime = date2 - date1; // Remove Math.abs to consider the direction of difference\n    return diffTime / 86400000;\n};\n\n});\n\nparcelRegister(\"eVKce\", function(module, exports) {\n\n$parcel$export(module.exports, \"formatDate\", () => $02ce19b23824314f$export$3ae94a2503e890a1);\nfunction $02ce19b23824314f$export$3ae94a2503e890a1(string) {\n    const date = new Date(string);\n    // Array of month names\n    const monthNames = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\"\n    ];\n    const day = date.getDate();\n    const month = monthNames[date.getMonth()];\n    const year = date.getFullYear();\n    // Get the appropriate suffix for the date\n    const suffix = $02ce19b23824314f$var$getDaySuffix(day);\n    return `${month} ${day}${suffix}, ${year}`;\n}\nfunction $02ce19b23824314f$var$getDaySuffix(day) {\n    if (day > 3 && day < 21) return \"th\"; // Handle 11th to 20th\n    switch(day % 10){\n        case 1:\n            return \"st\";\n        case 2:\n            return \"nd\";\n        case 3:\n            return \"rd\";\n        default:\n            return \"th\";\n    }\n}\n\n});\n\n\nvar $800sp = parcelRequire(\"800sp\");\n\nvar $evz6q = parcelRequire(\"evz6q\");\n\nvar $eVKce = parcelRequire(\"eVKce\");\nconst $c10fc4dd470a6ad9$var$config = {\n    apiBaseUrl: \"http://localhost:3000\" // Change this to your production URL when deploying\n};\nvar $c10fc4dd470a6ad9$export$2e2bcd8739ae039 = $c10fc4dd470a6ad9$var$config;\n\n\nclass $c2f68507ca7b2ad3$export$121b918d0786bd8d extends (0, $800sp.LitElement) {\n    constructor(){\n        super();\n        this.eventData = [];\n        this.userIsAuthorized = false;\n    }\n    static get properties() {\n        return {\n            eventData: {\n                type: Array,\n                attribute: false\n            },\n            userIsAuthorized: {\n                type: Boolean,\n                attribute: false\n            }\n        };\n    }\n    static get styles() {\n        return (0, $800sp.css)`\n      :host {\n        display: block;\n        width: 100%;\n        height: max-content;\n        position: relative;\n      }\n\n      #button__event--new {\n        position: absolute;\n        right: 0;\n        top: 0;\n      }\n\n      .event {\n       /* width: max-content; */\n       padding: 2rem;\n       position: relative;\n       width: 60vw;\n       border: 1px solid grey;;\n       background-color: transparent;\n       display: flex;\n       gap: 2rem;\n       justify-content: space-between\n      }\n\n      .event:not(:last-child) {\n        margin-bottom: 2rem;\n      }\n\n      .event-info {\n        justify-self: flex-end;\n      }\n\n      h2 {\n        margin: auto 0;\n      }\n\n      .event__action-bar {\n        display: flex;\n        gap: 1rem;\n        justify-content: space-between;\n      }\n\n      #button__dialog--close {\n        position: absolute;\n        right: .5rem;\n        top: .5rem;\n        padding: 0 !important;\n      }\n\n      .dialog__btn--close {\n        display: inline-block;\n        width: 100%;\n        height: 100%;\n        background-image: url('../close.svg');\n      }\n\n      .button__event--delete {\n        display: inline-block;\n        width: 100%;\n        height: 100%;\n        background-image: url('../trash-can.svg');\n        transition: transform .2s;\n      }\n\n      .button__event--edit {\n        display: inline-block;\n        width: 100%;\n        height: 100%;\n        background-image: url('../edit.svg');\n        transition: transform .2s;\n      }\n\n      .button__event--delete:hover, .button__event--edit:hover {\n        transform: scale(1.2);\n        cursor: pointer;\n      }\n    `;\n    }\n    async connectedCallback() {\n        super.connectedCallback();\n        this.eventData = await (0, $evz6q.sortDataByDate)();\n        const userAuthorizedData = sessionStorage.getItem(\"authorized-user\");\n        if (userAuthorizedData === null || userAuthorizedData == \"false\") this.userIsAuthorized = false;\n        else this.userIsAuthorized = true;\n        document.addEventListener(\"auth-state\", (e)=>{\n            this.userIsAuthorized = e.detail;\n        });\n    }\n    render() {\n        return (0, $800sp.html)`\n    <link rel=\"stylesheet\" href=\"/index.css\">\n      ${this.userIsAuthorized ? (0, $800sp.html)`\n        <button id=\"button__event--new\"  @click=\"${this.openNewEventForm}\">Create New Event</button>\n        <dialog id=\"dialog__event--new\">\n          <button id=\"button__dialog--close\" title=\"close dialog\" @click=\"${this.closeNewEventForm}\" class=\"icon\">\n            <div class=\"icon__wrap\">\n              <span class=\"dialog__btn--close\"></span>\n            </div>\n          </button>\n          <form action=\"/api/v1/events/\" method=\"post\">\n            <span class=\"form-heading\">Create New Event</span>\n  \n            <div class=\"input-wrap\">\n              <label for=\"title\">Title:</label>\n              <input type=\"text\" id=\"title\" name=\"title\">\n            </div>\n  \n            <div class=\"input-wrap\">\n              <label for=\"start_date\">Start Date:</label>\n              <input type=\"date\" id=\"start_date\" name=\"start_date\">\n            </div>\n  \n            <div class=\"input-wrap\">\n              <label for=\"end_date\">End Date:</label>\n              <input type=\"date\" id=\"end_date\" name=\"end_date\">\n            </div>\n  \n            <div class=\"input-wrap\">\n              <label for=\"location\">Location:</label>\n              <input type=\"text\" id=\"location\" name=\"location\">\n            </div>\n  \n            <div class=\"input-wrap\">\n              <label for=\"details\">Details:</label>\n              <input type=\"text\" id=\"details\" name=\"details\">\n            </div>\n  \n            <button type=\"submit\">Create</button>\n          </form>\n        </dialog>\n  \n  \n        <dialog id=\"dialog__event--edit\">\n        <button id=\"button__dialog--close\" title=\"close dialog\" @click=\"${this.closeEditEventForm}\" class=\"icon\">\n          <div class=\"icon__wrap\">\n            <span class=\"dialog__btn--close\"></span>\n          </div>\n        </button>\n          <form id=\"form__event--edit\">\n            <span class=\"form-heading\">Edit Event</span>\n  \n            <div class=\"input-wrap\">\n              <label for=\"title\">Title:</label>\n              <input type=\"text\" id=\"edit__title\" name=\"title\">\n            </div>\n  \n            <div class=\"input-wrap\">\n              <label for=\"start_date\">Start Date:</label>\n              <input type=\"date\" id=\"edit__start_date\" name=\"start_date\">\n            </div>\n  \n  \n            <div class=\"input-wrap\">\n              <label for=\"end_date\">End Date:</label>\n              <input type=\"date\" id=\"edit__end_date\" name=\"end_date\">\n            </div>\n  \n  \n            <div class=\"input-wrap\">\n              <label for=\"location\">Location:</label>\n              <input type=\"text\" id=\"edit__location\" name=\"location\">\n            </div>\n  \n  \n            <div class=\"input-wrap\">\n              <label for=\"details\">Details:</label>\n              <input type=\"text\" id=\"edit__details\" name=\"details\">\n            </div>\n  \n  \n            <button type=\"submit\" @click=\"${this.updateEvent}\">Update</button>\n  \n            <input type=\"hidden\" class=\"edit__id--hidden\" name=\"id\">\n          </form>\n        </dialog>\n        ` : ``}\n\n\n      ${this.eventData.length > 0 ? this.eventData.map((event)=>(0, $800sp.html)`\n        <div class=\"event\">\n\n          <div class=\"event-data\">\n            <h2>${event.title}</h2>\n            <div class=\"event-info\">\n              <p>${(0, $eVKce.formatDate)(event.start_date)} - ${(0, $eVKce.formatDate)(event.end_date)}</p>\n              <p>Location: ${event.location}</p>\n              <p>Details: ${event.details}</p>\n            </div>\n          </div>\n          <div class=\"event__action-bar\">\n            <div class=\"icon__wrap\">\n              <span class=\"button__event--edit\" title=\"edit event\" data-id=\"${event.id}\" @click=\"${this.editEvent}\"></span>\n            </div>\n            <div class=\"icon__wrap\">\n              <span class=\"button__event--delete\" title=\"delete event\" data-id=\"${event.id}\" @click=\"${this.deleteEvent}\"></span>\n            </div>\n          </div>\n        </div>\n\n        `) : (0, $800sp.html)`<p>No upcoming events</p>`}\n    `;\n    }\n    /* utils  */ openNewEventForm() {\n        const dialog = this.shadowRoot.querySelector(\"#dialog__event--new\");\n        dialog.showModal();\n    }\n    closeNewEventForm() {\n        const dialog = this.shadowRoot.querySelector(\"#dialog__event--new\");\n        dialog.close();\n    }\n    async deleteEvent(e) {\n        const idToDelete = parseInt(e.target.getAttribute(\"data-id\"));\n        try {\n            const response = await fetch(`/api/v1/events/${idToDelete}`, {\n                method: \"DELETE\"\n            });\n            if (response.ok) this.eventData = await (0, $evz6q.sortDataByDate)();\n            else throw new Error(\"Failed to delete event\");\n        } catch (error) {\n            console.error(\"Error:\", error);\n            alert(\"An error occurred while trying to delete the event.\");\n        }\n    }\n    closeEditEventForm() {\n        const dialog = this.shadowRoot.querySelector(\"#dialog__event--edit\");\n        dialog.close();\n        const form = this.shadowRoot.querySelector(\"#form__event--edit\");\n        form.reset();\n    }\n    async editEvent(e) {\n        const idToEdit = parseInt(e.target.getAttribute(\"data-id\"));\n        const dialog = this.shadowRoot.querySelector(\"#dialog__event--edit\");\n        dialog.showModal();\n        try {\n            const response = await fetch(`/api/v1/events/${idToEdit}`);\n            const eventToEditArr = await response.json();\n            const eventToEdit = eventToEditArr[0];\n            console.log(eventToEdit);\n            this.shadowRoot.querySelector(\"#edit__title\").value = eventToEdit.title;\n            this.shadowRoot.querySelector(\"#edit__start_date\").value = this.formatDate(eventToEdit.start_date);\n            this.shadowRoot.querySelector(\"#edit__end_date\").value = this.formatDate(eventToEdit.end_date);\n            this.shadowRoot.querySelector(\"#edit__location\").value = eventToEdit.location;\n            this.shadowRoot.querySelector(\"#edit__details\").value = eventToEdit.details;\n            this.shadowRoot.querySelector(\".edit__id--hidden\").value = eventToEdit.id;\n        } catch (error) {\n            console.error(\"Error: \", error);\n        }\n    }\n    async updateEvent(e) {\n        e.preventDefault();\n        const dialog = this.shadowRoot.querySelector(\"#dialog__event--edit\");\n        const idToEdit = this.shadowRoot.querySelector(\".edit__id--hidden\").value;\n        const form = this.shadowRoot.querySelector(\"#form__event--edit\");\n        const formData = {\n            title: this.shadowRoot.querySelector(\"#edit__title\").value,\n            start_date: this.shadowRoot.querySelector(\"#edit__start_date\").value,\n            end_date: this.shadowRoot.querySelector(\"#edit__end_date\").value,\n            location: this.shadowRoot.querySelector(\"#edit__location\").value,\n            details: this.shadowRoot.querySelector(\"#edit__details\").value,\n            id: this.shadowRoot.querySelector(\".edit__id--hidden\").value\n        };\n        try {\n            const response = await fetch(`/api/v1/events/${idToEdit}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(formData)\n            });\n            if (response.ok) {\n                console.info(\"Successfully updated event\");\n                form.reset();\n                dialog.close();\n            } else console.error(\"Failed to update event\");\n        } catch (error) {\n            console.error(error);\n        }\n        this.eventData = await (0, $evz6q.sortDataByDate)();\n    }\n    formatDate(string) {\n        const date = new Date(string);\n        const formattedDate = date.toISOString().split(\"T\")[0];\n        return formattedDate;\n    }\n}\ncustomElements.define(\"event-component\", $c2f68507ca7b2ad3$export$121b918d0786bd8d);\n\n\n//# sourceMappingURL=news.e271c70b.js.map\n","export async function fetchData() {\n  try {\n    const response = await fetch('/api/v1/events');\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Failed to fetch data:', error);\n  }\n}\n\nexport async function sortDataByDate() {\n  const fetchedData = await fetchData();\n  \n  const today = new Date();\n\n  const sortedData = fetchedData.sort((a,b) => {\n    const dateA = new Date(a.start_date);\n    const dateB = new Date(b.start_date);\n    return getDifferenceInDays(today, dateA) - getDifferenceInDays(today, dateB);\n  });\n\n  return sortedData;\n\n}\n\n// Function to calculate the difference in days between two dates\nconst getDifferenceInDays = (date1, date2) => {\n  const diffTime = date2 - date1; // Remove Math.abs to consider the direction of difference\n  return diffTime / (1000 * 60 * 60 * 24);\n};\n","\nexport function formatDate(string) {\n  const date = new Date(string);\n  // Array of month names\n  const monthNames = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n\n  const day = date.getDate();\n  const month = monthNames[date.getMonth()];\n  const year = date.getFullYear();\n\n  // Get the appropriate suffix for the date\n  const suffix = getDaySuffix(day);\n\n  return `${month} ${day}${suffix}, ${year}`;\n}\n\nfunction getDaySuffix(day) {\n  if (day > 3 && day < 21) return 'th'; // Handle 11th to 20th\n  switch (day % 10) {\n      case 1: return 'st';\n      case 2: return 'nd';\n      case 3: return 'rd';\n      default: return 'th';\n  }\n}","import { LitElement, html, css } from \"lit\";\nimport { sortDataByDate } from \"../utils/fetchEventData.js\";\nimport { formatDate } from \"../utils/formatDate.js\";\nimport config from \"../../config.js\";\n\n\nexport class EventComponent extends LitElement {\n  constructor() {\n    super();\n\n\n    this.eventData = [];\n    this.userIsAuthorized = false;\n  }\n\n  static get properties() {\n    return {\n      eventData: { type: Array, attribute: false },\n      userIsAuthorized: { type: Boolean, attribute: false }\n    }\n  }\n\n  static get styles() {\n      return css`\n      :host {\n        display: block;\n        width: 100%;\n        height: max-content;\n        position: relative;\n      }\n\n      #button__event--new {\n        position: absolute;\n        right: 0;\n        top: 0;\n      }\n\n      .event {\n       /* width: max-content; */\n       padding: 2rem;\n       position: relative;\n       width: 60vw;\n       border: 1px solid grey;;\n       background-color: transparent;\n       display: flex;\n       gap: 2rem;\n       justify-content: space-between\n      }\n\n      .event:not(:last-child) {\n        margin-bottom: 2rem;\n      }\n\n      .event-info {\n        justify-self: flex-end;\n      }\n\n      h2 {\n        margin: auto 0;\n      }\n\n      .event__action-bar {\n        display: flex;\n        gap: 1rem;\n        justify-content: space-between;\n      }\n\n      #button__dialog--close {\n        position: absolute;\n        right: .5rem;\n        top: .5rem;\n        padding: 0 !important;\n      }\n\n      .dialog__btn--close {\n        display: inline-block;\n        width: 100%;\n        height: 100%;\n        background-image: url('../close.svg');\n      }\n\n      .button__event--delete {\n        display: inline-block;\n        width: 100%;\n        height: 100%;\n        background-image: url('../trash-can.svg');\n        transition: transform .2s;\n      }\n\n      .button__event--edit {\n        display: inline-block;\n        width: 100%;\n        height: 100%;\n        background-image: url('../edit.svg');\n        transition: transform .2s;\n      }\n\n      .button__event--delete:hover, .button__event--edit:hover {\n        transform: scale(1.2);\n        cursor: pointer;\n      }\n    `;\n  }\n\n  async connectedCallback() {\n    super.connectedCallback();\n    this.eventData = await sortDataByDate();\n\n    const userAuthorizedData = sessionStorage.getItem('authorized-user');\n    if (userAuthorizedData === null || userAuthorizedData == 'false') {\n      this.userIsAuthorized = false;\n    } else {\n      this.userIsAuthorized = true;\n    }\n\n    document.addEventListener('auth-state', (e) => {\n      this.userIsAuthorized = e.detail;\n    });\n  }\n\n\n  render() {\n    return html`\n    <link rel=\"stylesheet\" href=\"/index.css\">\n      ${this.userIsAuthorized ? html`\n        <button id=\"button__event--new\"  @click=\"${this.openNewEventForm}\">Create New Event</button>\n        <dialog id=\"dialog__event--new\">\n          <button id=\"button__dialog--close\" title=\"close dialog\" @click=\"${this.closeNewEventForm}\" class=\"icon\">\n            <div class=\"icon__wrap\">\n              <span class=\"dialog__btn--close\"></span>\n            </div>\n          </button>\n          <form action=\"/api/v1/events/\" method=\"post\">\n            <span class=\"form-heading\">Create New Event</span>\n  \n            <div class=\"input-wrap\">\n              <label for=\"title\">Title:</label>\n              <input type=\"text\" id=\"title\" name=\"title\">\n            </div>\n  \n            <div class=\"input-wrap\">\n              <label for=\"start_date\">Start Date:</label>\n              <input type=\"date\" id=\"start_date\" name=\"start_date\">\n            </div>\n  \n            <div class=\"input-wrap\">\n              <label for=\"end_date\">End Date:</label>\n              <input type=\"date\" id=\"end_date\" name=\"end_date\">\n            </div>\n  \n            <div class=\"input-wrap\">\n              <label for=\"location\">Location:</label>\n              <input type=\"text\" id=\"location\" name=\"location\">\n            </div>\n  \n            <div class=\"input-wrap\">\n              <label for=\"details\">Details:</label>\n              <input type=\"text\" id=\"details\" name=\"details\">\n            </div>\n  \n            <button type=\"submit\">Create</button>\n          </form>\n        </dialog>\n  \n  \n        <dialog id=\"dialog__event--edit\">\n        <button id=\"button__dialog--close\" title=\"close dialog\" @click=\"${this.closeEditEventForm}\" class=\"icon\">\n          <div class=\"icon__wrap\">\n            <span class=\"dialog__btn--close\"></span>\n          </div>\n        </button>\n          <form id=\"form__event--edit\">\n            <span class=\"form-heading\">Edit Event</span>\n  \n            <div class=\"input-wrap\">\n              <label for=\"title\">Title:</label>\n              <input type=\"text\" id=\"edit__title\" name=\"title\">\n            </div>\n  \n            <div class=\"input-wrap\">\n              <label for=\"start_date\">Start Date:</label>\n              <input type=\"date\" id=\"edit__start_date\" name=\"start_date\">\n            </div>\n  \n  \n            <div class=\"input-wrap\">\n              <label for=\"end_date\">End Date:</label>\n              <input type=\"date\" id=\"edit__end_date\" name=\"end_date\">\n            </div>\n  \n  \n            <div class=\"input-wrap\">\n              <label for=\"location\">Location:</label>\n              <input type=\"text\" id=\"edit__location\" name=\"location\">\n            </div>\n  \n  \n            <div class=\"input-wrap\">\n              <label for=\"details\">Details:</label>\n              <input type=\"text\" id=\"edit__details\" name=\"details\">\n            </div>\n  \n  \n            <button type=\"submit\" @click=\"${this.updateEvent}\">Update</button>\n  \n            <input type=\"hidden\" class=\"edit__id--hidden\" name=\"id\">\n          </form>\n        </dialog>\n        `: ``}\n\n\n      ${this.eventData.length > 0 \n        ? this.eventData.map((event) => html`\n        <div class=\"event\">\n\n          <div class=\"event-data\">\n            <h2>${event.title}</h2>\n            <div class=\"event-info\">\n              <p>${formatDate(event.start_date)} - ${formatDate(event.end_date)}</p>\n              <p>Location: ${event.location}</p>\n              <p>Details: ${event.details}</p>\n            </div>\n          </div>\n          <div class=\"event__action-bar\">\n            <div class=\"icon__wrap\">\n              <span class=\"button__event--edit\" title=\"edit event\" data-id=\"${event.id}\" @click=\"${this.editEvent}\"></span>\n            </div>\n            <div class=\"icon__wrap\">\n              <span class=\"button__event--delete\" title=\"delete event\" data-id=\"${event.id}\" @click=\"${this.deleteEvent}\"></span>\n            </div>\n          </div>\n        </div>\n\n        `) \n        : html`<p>No upcoming events</p>`\n      }\n    `;\n\n  }\n\n\n  /* utils  */\n  openNewEventForm() {\n    const dialog =  this.shadowRoot.querySelector('#dialog__event--new');\n    dialog.showModal();\n  }\n\n  closeNewEventForm() {\n    const dialog =  this.shadowRoot.querySelector('#dialog__event--new');\n    dialog.close();\n  }\n\n  async deleteEvent(e) {\n    const idToDelete = parseInt(e.target.getAttribute('data-id'));\n\n    try {\n      const response = await fetch(`/api/v1/events/${idToDelete}`, {\n        method: 'DELETE',\n      });\n      if (response.ok) {\n        this.eventData = await sortDataByDate();\n      } else {\n        throw new Error('Failed to delete event');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert('An error occurred while trying to delete the event.');\n    }\n  } \n\n  closeEditEventForm() {\n    const dialog =  this.shadowRoot.querySelector('#dialog__event--edit');\n    dialog.close();\n\n    const form =  this.shadowRoot.querySelector('#form__event--edit');\n    form.reset();\n  }\n\n  async editEvent(e) {\n    const idToEdit = parseInt(e.target.getAttribute('data-id'));\n    const dialog =  this.shadowRoot.querySelector('#dialog__event--edit');\n    dialog.showModal();\n\n    try {\n      const response = await fetch(`/api/v1/events/${idToEdit}`);\n      const eventToEditArr = await response.json();\n      const eventToEdit = eventToEditArr[0];\n      console.log(eventToEdit);\n      this.shadowRoot.querySelector('#edit__title').value = eventToEdit.title;\n      this.shadowRoot.querySelector('#edit__start_date').value = this.formatDate(eventToEdit.start_date);\n      this.shadowRoot.querySelector('#edit__end_date').value = this.formatDate(eventToEdit.end_date);\n      this.shadowRoot.querySelector('#edit__location').value = eventToEdit.location;\n      this.shadowRoot.querySelector('#edit__details').value = eventToEdit.details;\n      this.shadowRoot.querySelector('.edit__id--hidden').value = eventToEdit.id;\n    } catch (error) {\n      console.error('Error: ', error);\n    }\n  }\n\n  async updateEvent(e) {    \n    e.preventDefault();\n    const dialog = this.shadowRoot.querySelector('#dialog__event--edit');\n    const idToEdit = this.shadowRoot.querySelector('.edit__id--hidden').value;\n    const form = this.shadowRoot.querySelector('#form__event--edit');\n\n    const formData = {\n      title: this.shadowRoot.querySelector('#edit__title').value,\n      start_date: this.shadowRoot.querySelector('#edit__start_date').value,\n      end_date: this.shadowRoot.querySelector('#edit__end_date').value,\n      location: this.shadowRoot.querySelector('#edit__location').value,\n      details: this.shadowRoot.querySelector('#edit__details').value,\n      id : this.shadowRoot.querySelector('.edit__id--hidden').value\n    }\n\n    try {\n      const response = await fetch(`/api/v1/events/${idToEdit}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData),\n    });\n\n      if (response.ok) {\n        console.info('Successfully updated event');\n        form.reset();\n        dialog.close();\n      } else {\n        console.error('Failed to update event');\n      }\n\n    } catch (error) {\n      console.error(error);\n    }\n\n\n\n    this.eventData = await sortDataByDate();\n  }\n\n  formatDate(string) {\n    const date = new Date(string);\n    const formattedDate = date.toISOString().split('T')[0];\n    return formattedDate;\n  }\n\n}\n\ncustomElements.define('event-component', EventComponent);\n\n\n","const config = {\n  apiBaseUrl: 'http://localhost:3000' // Change this to your production URL when deploying\n};\n\nexport default config;"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$a8ff3090db36c7ef$export$8134c072fddab6a5","response","fetch","ok","status","json","error","console","$a8ff3090db36c7ef$export$bb81d7902e9f278","fetchedData","today","Date","sort","a","b","dateA","start_date","dateB","$a8ff3090db36c7ef$var$getDifferenceInDays","date1","date2","diffTime","$02ce19b23824314f$export$3ae94a2503e890a1","string","date","day","getDate","month","monthNames","getMonth","year","getFullYear","suffix","$02ce19b23824314f$var$getDaySuffix","$800sp","$evz6q","$eVKce","$c2f68507ca7b2ad3$export$121b918d0786bd8d","LitElement","constructor","eventData","userIsAuthorized","properties","type","Array","attribute","Boolean","styles","css","connectedCallback","sortDataByDate","userAuthorizedData","sessionStorage","getItem","document","addEventListener","detail","render","html","openNewEventForm","closeNewEventForm","closeEditEventForm","updateEvent","length","map","event","title","formatDate","end_date","location","details","editEvent","deleteEvent","dialog","shadowRoot","querySelector","showModal","close","idToDelete","parseInt","target","getAttribute","method","alert","form","reset","idToEdit","eventToEdit","eventToEditArr","log","value","preventDefault","formData","headers","body","JSON","stringify","info","toISOString","split","customElements","define"],"version":3,"file":"news.e271c70b.js.map"}