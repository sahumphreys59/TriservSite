{"mappings":"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","sources":["<anon>","src/components/jobComponent.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirefc44\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirefc44\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $800sp = parcelRequire(\"800sp\");\nclass $6f93273cde984fb8$export$476673862418caea extends (0, $800sp.LitElement) {\n    constructor(){\n        super();\n        this.jobData = [];\n        this.userIsAuthorized = false;\n    }\n    static get properties() {\n        return {\n            jobData: {\n                type: Array,\n                attribute: false\n            },\n            userIsAuthorized: {\n                type: Boolean,\n                attribute: false\n            }\n        };\n    }\n    static get styles() {\n        return (0, $800sp.css)`\n    :host {\n      display: block;\n      width: 100%;\n      height: 100%;\n    }\n    \n    #button__dialog--close {\n      position: absolute;\n      right: .5rem;\n      top: .5rem;\n      padding: 0 !important;\n    }\n\n    .dialog__btn--close {\n      display: inline-block;\n      width: 100%;\n      height: 100%;\n      background-image: url('../close.svg');\n    }\n\n    .container {\n      padding: 2rem;\n      display: flex;\n      flex-wrap: wrap;\n      gap: 2rem;\n      width: 100%;\n      margin: 0 auto;\n    }\n\n    .job {\n      flex: 1 1 25%; \n      background-color: var(--layer-2);\n      padding: 2rem;\n      box-sizing: border-box;\n      border: 1px solid grey;\n      display: flex;\n      justify-content: space-between;\n      height: 200px;\n      transition: all .3s;\n    }\n\n\n    h3:hover {\n      color: var(--color-blue);\n      cursor: pointer;\n      text-decoration: underline;\n    }\n\n    dialog h3:hover {\n      color: currentColor;\n      cursor: auto;\n      text-decoration: none;\n    }\n\n    .arrow {\n      display: inline-block;\n      width: 1.5rem;\n      height: 1.5rem;\n      background-image: url('../arrow__right--blue.svg');\n      background-size: cover;\n      background-repeat: no-repeat;\n    } \n\n    .button__job-delete {\n      display: inline-block;\n      width: 100%;\n      height: 100%;\n      background-image: url('../trash-can.svg');\n      transition: transform .2s;\n    }\n\n    .button__job-delete:hover {\n      cursor: pointer;\n      transform: scale(1.2);\n    }\n\n    \n    .button__job--edit {\n      display: inline-block;\n      width: 100%;\n      height: 100%;\n      background-image: url('../edit.svg');\n      transition: transform .2s;\n    }\n\n    .button__job--edit:hover {\n      transform: scale(1.2);\n      cursor: pointer;\n    }\n\n    .job__action-bar {\n      display: flex;\n      gap: 1rem;\n      justify-content: space-between;\n      width: max-content;\n    }\n\n    #job__display-container {\n      padding: 1rem;\n      min-width: 40vw;\n      min-height: 30vh;\n    }\n\n    `;\n    }\n    async fetchJobData() {\n        try {\n            const response = await fetch(\"/api/v1/jobs\");\n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Failed to fetch data: \", error);\n        }\n    }\n    async connectedCallback() {\n        super.connectedCallback();\n        this.jobData = await this.fetchJobData();\n        const userAuthorizedData = sessionStorage.getItem(\"authorized-user\");\n        if (userAuthorizedData === null || userAuthorizedData == \"false\") this.userIsAuthorized = false;\n        else this.userIsAuthorized = true;\n        document.addEventListener(\"auth-state\", (e)=>{\n            console.log(\"here was supposed to dispatch\");\n            this.userIsAuthorized = e.detail;\n        });\n    }\n    render() {\n        return (0, $800sp.html)`\n    <link rel=\"stylesheet\" href=\"/index.css\">\n    ${this.userIsAuthorized ? (0, $800sp.html)`\n      <button @click=\"${this.openNewJobForm}\">Create New Job</button>\n      <dialog id=\"dialog__job--new\">\n        <button id=\"button__dialog--close\" title=\"close dialog\" @click=\"${this.closeNewJobForm}\" class=\"icon\">\n          <div class=\"icon__wrap\">\n            <span class=\"dialog__btn--close\"></span>\n          </div>\n        </button>\n        <form action=\"/api/v1/jobs/\" method=\"post\">\n          <span class=\"form-heading\">Create New Job</span>\n          <div class=\"input-wrap\">\n            <label for=\"job_title\">Job Title:</label>\n            <input type=\"text\" id=\"new__job_title\" name=\"job_title\">\n          </div>\n\n          <div class=\"input-wrap\">\n            <label for=\"location\">Location:</label>\n            <input type=\"text\" id=\"new__location\" name=\"location\">\n          </div>\n\n          <div class=\"input-wrap\">\n            <label for=\"details\">Details:</label>\n            <input type=\"text\" id=\"new__details\" name=\"details\">\n          </div>\n\n          <div class=\"input-wrap\">\n            <label for=\"category\">Category:</label>\n            <input type=\"text\" id=\"new__category\" name=\"category\">\n          </div>\n\n          <div class=\"input-wrap\">\n          <label for=\"experience_level\">Experience Level:</label>\n          <input type=\"text\" id=\"new__experience_level\" name=\"experience_level\">\n        </div>\n\n          <div class = \"input-wrap\">\n            <label for=\"new__job__type\">Employment Type:</label>\n            <select name=\"option\" id=\"new__job__type\">\n              <option value=\"fulltime\">Full Time</option>\n              <option value=\"parttime\">Part Time</option>\n            </select>\n          </div>\n          <button type=\"submit\">Create</button>\n        </form>\n      </dialog>\n\n      <dialog id=\"dialog__job--edit\">\n        <button id=\"button__dialog--close\" title=\"close dialog\" @click=\"${this.closeEditJobForm}\" class=\"icon\">\n          <div class=\"icon__wrap\">\n            <span class=\"dialog__btn--close\"></span>\n          </div>\n        </button>\n        <form id=\"form__job--edit\">\n          <span class=\"form-heading\">Edit Job</span>\n          <div class=\"input-wrap\">\n            <label for=\"job_title\">Job Title:</label>\n            <input type=\"text\" id=\"edit__job_title\" name=\"job_title\">\n          </div>\n\n          <div class=\"input-wrap\">\n            <label for=\"location\">Location:</label>\n            <input type=\"text\" id=\"edit__location\" name=\"location\">\n          </div>\n\n          <div class=\"input-wrap\">\n            <label for=\"details\">Details:</label>\n            <input type=\"text\" id=\"edit__details\" name=\"details\">\n          </div>\n\n          <div class=\"input-wrap\">\n            <label for=\"edit__category\">Category:</label>\n            <input type=\"text\" id=\"edit__category\" name=\"category\">\n          </div>\n\n          <div class=\"input-wrap\">\n            <label for=\"edit__experience_level\">Experience Level:</label>\n            <input type=\"text\" id=\"edit__experience_level\" name=\"experience_level\">\n          </div>\n\n\n          <div class = \"input-wrap\">\n            <label for=\"edit__job_type\">Employment Type:</label>\n            <select name=\"option\" id=\"edit__job_type\">\n              <option value=\"fulltime\">Full Time</option>\n              <option value=\"parttime\">Part Time</option>\n            </select>\n          </div>\n          <button type=\"submit\" @click=\"${this.updateJob}\">Update</button>\n          <input type=\"hidden\" class=\"job__id--hidden\" name=\"id\">\n        </form>\n      </dialog>\n\n      <dialog id=\"job__display\">\n        <button id=\"button__dialog--close\" title=\"close dialog\" @click=\"${this.closeJobDisplayModal}\" class=\"icon\">\n          <div class=\"icon__wrap\">\n            <span class=\"dialog__btn--close\"></span>\n          </div>\n        </button>\n        <div id=\"job__display-container\">\n          <h3 class=\"job__display--job_title\"></h3>\n          <p class=\"job__display--location\"></p>\n          <p class=\"job__display--details\"></p>\n          <p class=\"job__display--job_type\"></p>\n          <p class=\"job__display--category\"></p>\n          <p class=\"job__display--experience_level\"></p>\n        </div>\n      </dialog>\n      ` : (0, $800sp.html)``}\n\n\n      <div class=\"container\">\n          ${this.jobData.length > 0 ? this.jobData.map((job)=>(0, $800sp.html)`\n              <div class=\"job\">\n                <div class=\"job-data\">\n                  <h3 @click=\"${this.renderJobDisplayModal}\" data-id=\"${job.id}\">${job.job_title}</h3>\n                  <p>${job.location}</p>\n                </div>\n                ${this.userIsAuthorized ? (0, $800sp.html)`\n                  <div class=\"job__action-bar\">    \n                    <div class=\"icon__wrap\">\n                      <span class=\"button__job--edit\" title=\"edit job post\" data-id=\"${job.id}\" @click=\"${this.openEditJobForm}\"></span>\n                    </div>\n                    <div class=\"icon__wrap\">\n                      <span class=\"button__job-delete\" title=\"delete job post\" data-id=\"${job.id}\" @click=\"${this.deleteJob}\"></span>\n                    </div>\n                  </div>\n                  ` : (0, $800sp.html)``}\n\n              </div>\n\n            `) : (0, $800sp.html)`<p>No postings yet</p>`}\n      </div>\n    `;\n    }\n    openNewJobForm() {\n        const dialog = this.shadowRoot.querySelector(\"#dialog__job--new\");\n        dialog.showModal();\n    }\n    closeNewJobForm() {\n        const dialog = this.shadowRoot.querySelector(\"#dialog__job--new\");\n        dialog.close();\n    }\n    async openEditJobForm(e) {\n        const idToEdit = parseInt(e.target.getAttribute(\"data-id\"));\n        const dialog = this.shadowRoot.querySelector(\"#dialog__job--edit\");\n        dialog.showModal();\n        console.log(idToEdit);\n        try {\n            const response = await fetch(`/api/v1/jobs/${idToEdit}`);\n            const jobToEditArr = await response.json();\n            const jobToEdit = jobToEditArr[0];\n            this.shadowRoot.querySelector(\"#edit__job_title\").value = jobToEdit.job_title;\n            this.shadowRoot.querySelector(\"#edit__location\").value = jobToEdit.location;\n            this.shadowRoot.querySelector(\"#edit__details\").value = jobToEdit.details;\n            this.shadowRoot.querySelector(\"#edit__job_type\").value = jobToEdit.job_type;\n            this.shadowRoot.querySelector(\".job__id--hidden\").value = jobToEdit.id;\n        } catch (error) {\n            console.error(\"Error: \", error);\n        }\n    }\n    async updateJob(e) {\n        e.preventDefault();\n        const dialog = this.shadowRoot.querySelector(\"#dialog__job--edit\");\n        const idToEdit = this.shadowRoot.querySelector(\".job__id--hidden\").value;\n        const form = this.shadowRoot.querySelector(\"#form__job--edit\");\n        const formData = {\n            job_title: this.shadowRoot.querySelector(\"#edit__job_title\").value,\n            location: this.shadowRoot.querySelector(\"#edit__location\").value,\n            details: this.shadowRoot.querySelector(\"#edit__details\").value,\n            job_type: this.shadowRoot.querySelector(\"#edit__job_type\").value\n        };\n        try {\n            const response = await fetch(`/api/v1/jobs/${idToEdit}`, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(formData)\n            });\n            if (response.ok) {\n                console.info(\"Successfully updated job\");\n                form.reset();\n                dialog.close();\n            } else console.error(\"Failed to update job\");\n        } catch (error) {\n            console.error(error);\n        }\n        this.jobData = await this.fetchJobData();\n    }\n    closeEditJobForm() {\n        const dialog = this.shadowRoot.querySelector(\"#dialog__job--edit\");\n        dialog.close();\n    }\n    renderJobDetailPopup(obj) {\n        console.log(obj);\n    }\n    async deleteJob(e) {\n        const idToDelete = parseInt(e.target.getAttribute(\"data-id\"));\n        try {\n            const response = await fetch(`/api/v1/jobs/${idToDelete}`, {\n                method: \"DELETE\"\n            });\n            if (response.ok) this.jobData = await this.fetchJobData();\n        } catch (error) {\n            console.error(\"Error:\", error);\n            alert(\"An error occurred while trying to delete the event.\");\n        }\n    }\n    async renderJobDisplayModal(e) {\n        const id = parseInt(e.target.getAttribute(\"data-id\"));\n        const response = await fetch(`/api/v1/jobs/${id}`);\n        const dataArr = await response.json();\n        const data = dataArr[0];\n        const dialog = this.shadowRoot.querySelector(\"#job__display\");\n        dialog.showModal();\n        this.shadowRoot.querySelector(\".job__display--job_title\").textContent = data.job_title;\n        this.shadowRoot.querySelector(\".job__display--location\").textContent = data.location;\n        this.shadowRoot.querySelector(\".job__display--details\").textContent = data.details;\n        this.shadowRoot.querySelector(\".job__display--job_type\").textContent = data.job_type;\n        this.shadowRoot.querySelector(\".job__display--category\").textContent = data.category;\n        this.shadowRoot.querySelector(\".job__display--experience_level\").textContent = data.experience_level;\n    }\n    closeJobDisplayModal() {\n        const dialog = this.shadowRoot.querySelector(\"#job__display\");\n        dialog.close();\n    }\n}\ncustomElements.define(\"job-component\", $6f93273cde984fb8$export$476673862418caea);\n\n\n//# sourceMappingURL=careers.34ca1ac5.js.map\n","import { LitElement, html, css } from \"lit\";\n\nexport class JobComponent extends LitElement {\n  constructor() {\n    super();\n    this.jobData = [];\n    this.userIsAuthorized = false;\n  }\n\n  static get properties() {\n    return {\n      jobData: { type: Array, attribute: false },\n      userIsAuthorized: { type: Boolean, attribute: false }\n    }\n  }\n\n  static get styles () {\n    return css`\n    :host {\n      display: block;\n      width: 100%;\n      height: 100%;\n    }\n    \n    #button__dialog--close {\n      position: absolute;\n      right: .5rem;\n      top: .5rem;\n      padding: 0 !important;\n    }\n\n    .dialog__btn--close {\n      display: inline-block;\n      width: 100%;\n      height: 100%;\n      background-image: url('../close.svg');\n    }\n\n    .container {\n      padding: 2rem;\n      display: flex;\n      flex-wrap: wrap;\n      gap: 2rem;\n      width: 100%;\n      margin: 0 auto;\n    }\n\n    .job {\n      flex: 1 1 25%; \n      background-color: var(--layer-2);\n      padding: 2rem;\n      box-sizing: border-box;\n      border: 1px solid grey;\n      display: flex;\n      justify-content: space-between;\n      height: 200px;\n      transition: all .3s;\n    }\n\n\n    h3:hover {\n      color: var(--color-blue);\n      cursor: pointer;\n      text-decoration: underline;\n    }\n\n    dialog h3:hover {\n      color: currentColor;\n      cursor: auto;\n      text-decoration: none;\n    }\n\n    .arrow {\n      display: inline-block;\n      width: 1.5rem;\n      height: 1.5rem;\n      background-image: url('../arrow__right--blue.svg');\n      background-size: cover;\n      background-repeat: no-repeat;\n    } \n\n    .button__job-delete {\n      display: inline-block;\n      width: 100%;\n      height: 100%;\n      background-image: url('../trash-can.svg');\n      transition: transform .2s;\n    }\n\n    .button__job-delete:hover {\n      cursor: pointer;\n      transform: scale(1.2);\n    }\n\n    \n    .button__job--edit {\n      display: inline-block;\n      width: 100%;\n      height: 100%;\n      background-image: url('../edit.svg');\n      transition: transform .2s;\n    }\n\n    .button__job--edit:hover {\n      transform: scale(1.2);\n      cursor: pointer;\n    }\n\n    .job__action-bar {\n      display: flex;\n      gap: 1rem;\n      justify-content: space-between;\n      width: max-content;\n    }\n\n    #job__display-container {\n      padding: 1rem;\n      min-width: 40vw;\n      min-height: 30vh;\n    }\n\n    `;\n  }\n\n  async fetchJobData() {\n    try {\n      const response = await fetch('/api/v1/jobs');\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch data: ', error);\n    }\n  }\n\n  async connectedCallback() {\n    super.connectedCallback();\n\n\n    this.jobData = await this.fetchJobData();\n\n\n    const userAuthorizedData = sessionStorage.getItem('authorized-user');\n    if (userAuthorizedData === null || userAuthorizedData == 'false') {\n      this.userIsAuthorized = false;\n    } else {\n      this.userIsAuthorized = true;\n    }\n\n    document.addEventListener('auth-state', (e) => {\n      console.log('here was supposed to dispatch')\n      this.userIsAuthorized = e.detail;\n    });\n\n  }\n\n  render() {\n    return html`\n    <link rel=\"stylesheet\" href=\"/index.css\">\n    ${this.userIsAuthorized ? html`\n      <button @click=\"${this.openNewJobForm}\">Create New Job</button>\n      <dialog id=\"dialog__job--new\">\n        <button id=\"button__dialog--close\" title=\"close dialog\" @click=\"${this.closeNewJobForm}\" class=\"icon\">\n          <div class=\"icon__wrap\">\n            <span class=\"dialog__btn--close\"></span>\n          </div>\n        </button>\n        <form action=\"/api/v1/jobs/\" method=\"post\">\n          <span class=\"form-heading\">Create New Job</span>\n          <div class=\"input-wrap\">\n            <label for=\"job_title\">Job Title:</label>\n            <input type=\"text\" id=\"new__job_title\" name=\"job_title\">\n          </div>\n\n          <div class=\"input-wrap\">\n            <label for=\"location\">Location:</label>\n            <input type=\"text\" id=\"new__location\" name=\"location\">\n          </div>\n\n          <div class=\"input-wrap\">\n            <label for=\"details\">Details:</label>\n            <input type=\"text\" id=\"new__details\" name=\"details\">\n          </div>\n\n          <div class=\"input-wrap\">\n            <label for=\"category\">Category:</label>\n            <input type=\"text\" id=\"new__category\" name=\"category\">\n          </div>\n\n          <div class=\"input-wrap\">\n          <label for=\"experience_level\">Experience Level:</label>\n          <input type=\"text\" id=\"new__experience_level\" name=\"experience_level\">\n        </div>\n\n          <div class = \"input-wrap\">\n            <label for=\"new__job__type\">Employment Type:</label>\n            <select name=\"option\" id=\"new__job__type\">\n              <option value=\"fulltime\">Full Time</option>\n              <option value=\"parttime\">Part Time</option>\n            </select>\n          </div>\n          <button type=\"submit\">Create</button>\n        </form>\n      </dialog>\n\n      <dialog id=\"dialog__job--edit\">\n        <button id=\"button__dialog--close\" title=\"close dialog\" @click=\"${this.closeEditJobForm}\" class=\"icon\">\n          <div class=\"icon__wrap\">\n            <span class=\"dialog__btn--close\"></span>\n          </div>\n        </button>\n        <form id=\"form__job--edit\">\n          <span class=\"form-heading\">Edit Job</span>\n          <div class=\"input-wrap\">\n            <label for=\"job_title\">Job Title:</label>\n            <input type=\"text\" id=\"edit__job_title\" name=\"job_title\">\n          </div>\n\n          <div class=\"input-wrap\">\n            <label for=\"location\">Location:</label>\n            <input type=\"text\" id=\"edit__location\" name=\"location\">\n          </div>\n\n          <div class=\"input-wrap\">\n            <label for=\"details\">Details:</label>\n            <input type=\"text\" id=\"edit__details\" name=\"details\">\n          </div>\n\n          <div class=\"input-wrap\">\n            <label for=\"edit__category\">Category:</label>\n            <input type=\"text\" id=\"edit__category\" name=\"category\">\n          </div>\n\n          <div class=\"input-wrap\">\n            <label for=\"edit__experience_level\">Experience Level:</label>\n            <input type=\"text\" id=\"edit__experience_level\" name=\"experience_level\">\n          </div>\n\n\n          <div class = \"input-wrap\">\n            <label for=\"edit__job_type\">Employment Type:</label>\n            <select name=\"option\" id=\"edit__job_type\">\n              <option value=\"fulltime\">Full Time</option>\n              <option value=\"parttime\">Part Time</option>\n            </select>\n          </div>\n          <button type=\"submit\" @click=\"${this.updateJob}\">Update</button>\n          <input type=\"hidden\" class=\"job__id--hidden\" name=\"id\">\n        </form>\n      </dialog>\n\n      <dialog id=\"job__display\">\n        <button id=\"button__dialog--close\" title=\"close dialog\" @click=\"${this.closeJobDisplayModal}\" class=\"icon\">\n          <div class=\"icon__wrap\">\n            <span class=\"dialog__btn--close\"></span>\n          </div>\n        </button>\n        <div id=\"job__display-container\">\n          <h3 class=\"job__display--job_title\"></h3>\n          <p class=\"job__display--location\"></p>\n          <p class=\"job__display--details\"></p>\n          <p class=\"job__display--job_type\"></p>\n          <p class=\"job__display--category\"></p>\n          <p class=\"job__display--experience_level\"></p>\n        </div>\n      </dialog>\n      `: html``}\n\n\n      <div class=\"container\">\n          ${this.jobData.length > 0\n            ? this.jobData.map((job) => html`\n              <div class=\"job\">\n                <div class=\"job-data\">\n                  <h3 @click=\"${this.renderJobDisplayModal}\" data-id=\"${job.id}\">${job.job_title}</h3>\n                  <p>${job.location}</p>\n                </div>\n                ${this.userIsAuthorized ? html`\n                  <div class=\"job__action-bar\">    \n                    <div class=\"icon__wrap\">\n                      <span class=\"button__job--edit\" title=\"edit job post\" data-id=\"${job.id}\" @click=\"${this.openEditJobForm}\"></span>\n                    </div>\n                    <div class=\"icon__wrap\">\n                      <span class=\"button__job-delete\" title=\"delete job post\" data-id=\"${job.id}\" @click=\"${this.deleteJob}\"></span>\n                    </div>\n                  </div>\n                  ` : html``}\n\n              </div>\n\n            `) : html`<p>No postings yet</p>`\n          }\n      </div>\n    `;\n  }\n\n  openNewJobForm() {\n    const dialog = this.shadowRoot.querySelector('#dialog__job--new');\n    dialog.showModal();\n  }\n\n  closeNewJobForm() {\n    const dialog =  this.shadowRoot.querySelector('#dialog__job--new');\n    dialog.close();\n  }\n\n  async openEditJobForm(e) {\n    const idToEdit = parseInt(e.target.getAttribute('data-id'));\n    const dialog = this.shadowRoot.querySelector('#dialog__job--edit');\n    dialog.showModal();\n    console.log(idToEdit);\n    try {\n      const response = await fetch(`/api/v1/jobs/${idToEdit}`);\n      const jobToEditArr = await response.json();\n      const jobToEdit = jobToEditArr[0];\n      this.shadowRoot.querySelector('#edit__job_title').value = jobToEdit.job_title;\n      this.shadowRoot.querySelector('#edit__location').value = jobToEdit.location;\n      this.shadowRoot.querySelector('#edit__details').value = jobToEdit.details;\n      this.shadowRoot.querySelector('#edit__job_type').value = jobToEdit.job_type;\n      this.shadowRoot.querySelector('.job__id--hidden').value = jobToEdit.id;\n    } catch (error) {\n      console.error('Error: ', error);\n    }\n  }\n\n  async updateJob(e) {\n    e.preventDefault();\n    const dialog = this.shadowRoot.querySelector('#dialog__job--edit');\n    const idToEdit = this.shadowRoot.querySelector('.job__id--hidden').value;\n    const form = this.shadowRoot.querySelector('#form__job--edit');\n\n    const formData = {\n      job_title: this.shadowRoot.querySelector('#edit__job_title').value,\n      location: this.shadowRoot.querySelector('#edit__location').value,\n      details: this.shadowRoot.querySelector('#edit__details').value,\n      job_type: this.shadowRoot.querySelector('#edit__job_type').value\n    }\n\n    try {\n      const response = await fetch(`/api/v1/jobs/${idToEdit}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData),\n      });\n      if (response.ok) {\n        console.info('Successfully updated job');\n        form.reset();\n        dialog.close();\n      } else {\n        console.error('Failed to update job');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n\n    this.jobData = await this.fetchJobData();\n  }\n\n  closeEditJobForm() {\n    const dialog = this.shadowRoot.querySelector('#dialog__job--edit');\n    dialog.close();\n  }\n\n  renderJobDetailPopup(obj) {\n    console.log(obj);\n  }\n\n  async deleteJob(e) {\n    const idToDelete = parseInt(e.target.getAttribute('data-id'));\n\n    try {\n      const response = await fetch(`/api/v1/jobs/${idToDelete}`, {\n        method: 'DELETE',\n      });\n      if (response.ok) {\n         this.jobData = await this.fetchJobData();\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert('An error occurred while trying to delete the event.');\n    }\n  }\n\n  async renderJobDisplayModal(e) {\n    const id = parseInt(e.target.getAttribute('data-id'));\n    const response = await fetch(`/api/v1/jobs/${id}`);\n    const dataArr = await response.json();\n    const data = dataArr[0];\n\n    const dialog = this.shadowRoot.querySelector('#job__display');\n    dialog.showModal();\n\n    this.shadowRoot.querySelector('.job__display--job_title').textContent = data.job_title;\n    this.shadowRoot.querySelector('.job__display--location').textContent = data.location;\n    this.shadowRoot.querySelector('.job__display--details').textContent = data.details;\n    this.shadowRoot.querySelector('.job__display--job_type').textContent = data.job_type;\n    this.shadowRoot.querySelector('.job__display--category').textContent = data.category;\n    this.shadowRoot.querySelector('.job__display--experience_level').textContent = data.experience_level;\n\n  }\n\n  closeJobDisplayModal() {\n    const dialog = this.shadowRoot.querySelector('#job__display');\n    dialog.close();\n  }\n\n}\n\ncustomElements.define('job-component', JobComponent);"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$800sp","$6f93273cde984fb8$export$476673862418caea","LitElement","constructor","jobData","userIsAuthorized","properties","type","Array","attribute","Boolean","styles","css","fetchJobData","response","fetch","ok","status","json","error","console","connectedCallback","userAuthorizedData","sessionStorage","getItem","document","addEventListener","e","log","detail","render","html","openNewJobForm","closeNewJobForm","closeEditJobForm","updateJob","closeJobDisplayModal","length","map","job","renderJobDisplayModal","job_title","location","openEditJobForm","deleteJob","dialog","shadowRoot","querySelector","showModal","close","idToEdit","parseInt","target","getAttribute","jobToEdit","jobToEditArr","value","details","job_type","preventDefault","form","formData","method","headers","body","JSON","stringify","info","reset","renderJobDetailPopup","obj","idToDelete","alert","data","dataArr","textContent","category","experience_level","customElements","define"],"version":3,"file":"careers.34ca1ac5.js.map"}